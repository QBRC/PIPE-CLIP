# Programmer : beibei.chen@utsouthwestern.edu
# Usage: Find nriched clusters according to the reads-length table generated by ZTNB.R
# Input: BED and table
# Output: BED
# Last modified: 19 Dec. 2013

import sys
import string

class getClusterRunner:
  def __init__(self,infile,nbfile,producedFile):
    self.infile = infile
    self.nbfile = nbfile
    self.producedFile = producedFile

  def run(self):
    nbDic ={}
    for item in self.nbfile:
      buf = item.rstrip().split("\t")
      nb_key = "_".join(buf[0:2])  # Use reads_length pair as key
      if not nbDic.has_key(nb_key):
        nbDic[nb_key]=buf[-1]
    for record in self.infile:
      bufr = record.rstrip().split("\t")
      r_key = bufr[4]+"_"+str(int(bufr[2])-int(bufr[1]))
      if nbDic.has_key(r_key):
        bufr.append(nbDic[r_key])
        #print "\t".join(bufr)
        self.producedFile.write("\t".join(bufr))

def getClusterMain(infilePath,nbFilePath,producedFilePath):
  try:
    infile = open(infilePath,"r+")
  except IOError,message:
    print >> sys.stderr, "cannot open file",message
    sys.exit(1)

  try:
    nbfile = open(nbFilePath,"r+")
  except IOError,message:
    print >> sys.stderr, "cannot open file",message
    sys.exit(1)

  producedFile = open(producedFilePath,"w+");

  agetClusterRunner = getClusterRunner(infile,nbfile,producedFile)
  agetClusterRunner.run()

  producedFile.close()
  infile.close()
  nbfile.close()
def getClusterMainNoArgs():
  try:
    infile = open(sys.argv[1],"r+")
  except IOError,message:
    print >> sys.stderr, "cannot open file",message
    sys.exit(1)
  
  try:
    nbfile = open(sys.argv[2],"r+")
  except IOError,message:
    print >> sys.stderr, "cannot open file",message
    sys.exit(1)

  getClusterRunner = getClusterRunner(ifnile,nbfile)
  getClusterRunner.run()

if __name__=="__main__":
  getClusterMainNoArgs()
